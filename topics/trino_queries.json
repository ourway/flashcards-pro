[
  {
    "question": "How can you query an Iceberg table as it existed at a specific point in time using Trino SQL, demonstrating 'Time Travel'?",
    "answer": "You can use the `FOR SYSTEM_TIME AS OF` clause in Trino SQL to query a historical snapshot of an Iceberg table. This demonstrates Iceberg's **Time Travel** feature, allowing you to access past versions of your data.\n\n```sql markdown\n-- Query 'my_iceberg_table' as it was on '2023-10-26 10:00:00 UTC'\nSELECT \n    * \nFROM \n    your_iceberg_catalog.your_iceberg_schema.my_iceberg_table\nFOR SYSTEM_TIME AS OF TIMESTAMP '2023-10-26 10:00:00 UTC';\n\n-- Explanation:\n-- `FOR SYSTEM_TIME AS OF TIMESTAMP '...'` clause tells Trino to query\n-- the table snapshot that was current at the specified timestamp.\n-- Replace 'your_iceberg_catalog' and 'your_iceberg_schema'\n-- with your actual catalog and schema names.\n```\n\nThis query retrieves data from the Iceberg table as it was at the specified timestamp.  This is a core feature of Iceberg, enabling data auditing, reproducibility, and recovery from accidental data changes. Refer to [Iceberg Snapshots](https://iceberg.apache.org/spec#snapshots) for more details on snapshots and time travel.",
    "reference": "https://iceberg.apache.org/spec#snapshots"
  },
  {
    "question": "How can you query a specific snapshot version of an Iceberg table using Trino SQL, again showcasing 'Time Travel'?",
    "answer": "Instead of a timestamp, you can also use a snapshot ID with `FOR VERSION AS OF` to query a specific version of an Iceberg table in Trino. This is another way to leverage Iceberg's **Time Travel** capability.\n\n```sql markdown\n-- Query 'my_iceberg_table' at snapshot version '1234567890'\nSELECT \n    * \nFROM \n    your_iceberg_catalog.your_iceberg_schema.my_iceberg_table\nFOR VERSION AS OF 1234567890;\n\n-- Explanation:\n-- `FOR VERSION AS OF <snapshot_id>` clause instructs Trino to use the snapshot\n-- with the given ID. Snapshot IDs are unique identifiers assigned to each commit.\n-- You can find snapshot IDs in the table's metadata or snapshot history.\n-- Replace 'your_iceberg_catalog' and 'your_iceberg_schema' accordingly.\n```\n\nThis query fetches data from the exact snapshot version identified by '1234567890'. Knowing the snapshot ID allows for precise and repeatable queries against specific table states. See [Iceberg Snapshots](https://iceberg.apache.org/spec#snapshots) for details on snapshot versions.",
    "reference": "https://iceberg.apache.org/spec#snapshots"
  },
  {
    "question": "Write a Trino SQL query to retrieve the history of snapshots for an Iceberg table, to understand table evolution over time.",
    "answer": "Trino provides system tables to access Iceberg metadata.  You can query the `$snapshots` system table to get the snapshot history of an Iceberg table, which is valuable for understanding how the table has evolved.\n\n```sql markdown\n-- Retrieve snapshot history for 'my_iceberg_table'\nSELECT \n    snapshot_id, \n    committed_at, \n    operation, \n    summary\nFROM \n    your_iceberg_catalog.your_iceberg_schema.my_iceberg_table$snapshots\nORDER BY \n    committed_at DESC;\n\n-- Explanation:\n-- `your_iceberg_table$snapshots` is a system table in Trino that provides\n-- snapshot metadata for 'my_iceberg_table'.\n-- Columns like 'snapshot_id', 'committed_at', 'operation', and 'summary'\n-- give information about each snapshot, like when it was created, the type\n-- of operation that created it (append, replace, delete), and summary metrics.\n-- Ordering by 'committed_at DESC' shows the most recent snapshots first.\n-- Remember to replace 'your_iceberg_catalog' and 'your_iceberg_schema'.\n```\n\nThis query provides insights into the table's history, allowing you to track when changes were made, what type of operations occurred, and examine snapshot metadata. This is useful for auditing and understanding table evolution. Consult [Iceberg Snapshots](https://iceberg.apache.org/spec#snapshots) for snapshot details.",
    "reference": "https://iceberg.apache.org/spec#snapshots"
  },
  {
    "question": "How can you inspect the manifests associated with a specific snapshot in Iceberg using Trino SQL?",
    "answer": "You can use the `$manifests` system table in Trino, filtering by `snapshot_id`, to examine the manifest files that make up a specific Iceberg snapshot. Manifests are key to understanding data file organization.\n\n```sql markdown\n-- Inspect manifests for snapshot '1234567890' of 'my_iceberg_table'\nSELECT \n    manifest_path, \n    file_count, \n    added_files_count, \n    existing_files_count, \n    deleted_files_count \nFROM \n    your_iceberg_catalog.your_iceberg_schema.my_iceberg_table$manifests\nWHERE \n    snapshot_id = 1234567890;\n\n-- Explanation:\n-- `your_iceberg_table$manifests` is a system table providing manifest metadata.\n-- The `WHERE snapshot_id = ...` clause filters manifests for the specified snapshot.\n-- Columns like 'manifest_path', 'file_count', etc., provide information\n-- about each manifest file, like its location and summary file counts.\n-- Replace 'your_iceberg_catalog' and 'your_iceberg_schema'.\n```\n\nThis query reveals the manifest files that are part of the chosen snapshot, showing their paths and file counts. Examining manifests is crucial for understanding how data files are organized within a snapshot. Refer to [Iceberg Manifests](https://iceberg.apache.org/spec#manifests) for more information on manifests.",
    "reference": "https://iceberg.apache.org/spec#manifests"
  },
  {
    "question": "Write a Trino SQL query to examine the data files listed in the manifests of a specific Iceberg snapshot, to understand the underlying data file structure.",
    "answer": "To delve deeper, you can use the `$files` system table in Trino, again filtering by `snapshot_id`, to see the data files referenced by the manifests of a particular snapshot. This lets you inspect the actual data files.\n\n```sql markdown\n-- Examine data files for snapshot '1234567890' of 'my_iceberg_table'\nSELECT \n    file_path, \n    file_format, \n    record_count, \n    file_size_in_bytes, \n    partition \nFROM \n    your_iceberg_catalog.your_iceberg_schema.my_iceberg_table$files\nWHERE \n    snapshot_id = 1234567890\nLIMIT 10;\n\n-- Explanation:\n-- `your_iceberg_table$files` is the system table listing data files.\n-- Filtering by `snapshot_id` restricts to files of that snapshot.\n-- Columns like 'file_path', 'file_format', 'record_count', 'file_size_in_bytes',\n-- and 'partition' describe each data file in detail.\n-- `LIMIT 10` is used to show only a sample of data files.\n-- Remember to replace 'your_iceberg_catalog' and 'your_iceberg_schema'.\n```\n\nThis query lists data files associated with the specified snapshot, showing their paths, formats, sizes, and partition information. This is the lowest level of metadata inspection, revealing the actual data files that constitute the table at that point in time. See [Iceberg Data Files](https://iceberg.apache.org/spec#data-files) for details about data files.",
    "reference": "https://iceberg.apache.org/spec#data-files"
  },
  {
    "question": "How can you query table properties of an Iceberg table using Trino SQL, to understand its configuration?",
    "answer": "Iceberg tables have properties that configure their behavior. You can query the `$properties` system table in Trino to retrieve these table properties and understand the table's configuration.\n\n```sql markdown\n-- Retrieve table properties for 'my_iceberg_table'\nSELECT \n    name, \n    value \nFROM \n    your_iceberg_catalog.your_iceberg_schema.my_iceberg_table$properties;\n\n-- Explanation:\n-- `your_iceberg_table$properties` system table exposes table properties.\n-- The 'name' and 'value' columns represent the property name and its configured value.\n-- Table properties control various aspects of Iceberg tables, like default\n-- file format, snapshot retention, compaction settings, etc.\n-- Replace 'your_iceberg_catalog' and 'your_iceberg_schema'.\n```\n\nThis query lists the table properties and their values, providing insight into the table's configuration. Table properties are used to customize Iceberg table behavior. Refer to [Iceberg Table Properties](https://iceberg.apache.org/spec#table-properties) for available properties.",
    "reference": "https://iceberg.apache.org/spec#table-properties"
  },
  {
    "question": "Write a Trino SQL query to demonstrate querying data within a specific partition of an Iceberg table, showcasing partition filtering.",
    "answer": "Iceberg's partitioning allows for efficient filtering of data. You can write Trino SQL queries that leverage partition columns in the `WHERE` clause to filter data to specific partitions, improving query performance.\n\n```sql markdown\n-- Query 'my_partitioned_iceberg_table' filtering by partition column 'event_date'\nSELECT \n    * \nFROM \n    your_iceberg_catalog.your_iceberg_schema.my_partitioned_iceberg_table\nWHERE \n    event_date = DATE '2023-10-26'\nLIMIT 100;\n\n-- Explanation:\n-- Assumes 'my_partitioned_iceberg_table' is partitioned by 'event_date' column.\n-- The `WHERE event_date = DATE '2023-10-26'` clause filters data to only\n-- include partitions where 'event_date' is '2023-10-26'.\n-- Iceberg and Trino will use partition metadata to efficiently read only\n-- relevant partitions, speeding up the query.\n-- Replace placeholders with your actual table, catalog and schema names.\n```\n\nThis query demonstrates partition filtering. Iceberg uses partition metadata to avoid scanning unnecessary partitions, which is a significant performance advantage for partitioned tables. See [Iceberg Partitioning](https://iceberg.apache.org/spec#partitioning) for more on partitioning strategies.",
    "reference": "https://iceberg.apache.org/spec#partitioning"
  },
  {
    "question": "How can you use Trino SQL to query data based on partition transforms in an Iceberg table, demonstrating hidden partitioning?",
    "answer": "Iceberg's **hidden partitioning** allows you to query using predicates on the original data columns, even if the table is partitioned using transforms. Trino automatically translates these predicates to partition filters. Here's an example using a `year()` transform:\n\n```sql markdown\n-- Query 'my_transformed_partitioned_table' filtering by year from timestamp column\nSELECT \n    *\nFROM \n    your_iceberg_catalog.your_iceberg_schema.my_transformed_partitioned_table\nWHERE \n    event_timestamp >= TIMESTAMP '2023-01-01 00:00:00 UTC' \n    AND event_timestamp < TIMESTAMP '2024-01-01 00:00:00 UTC'\nLIMIT 100;\n\n-- Explanation:\n-- Assumes 'my_transformed_partitioned_table' is partitioned by `year(event_timestamp)`.\n-- Even though partitioning is based on `year()`, the query uses a predicate\n-- on the original 'event_timestamp' column.\n-- Trino and Iceberg will automatically infer the relevant year partitions\n-- to read, thanks to hidden partitioning, simplifying query writing.\n-- Adapt catalog, schema, and table names to your setup.\n```\n\nThis query showcases hidden partitioning. You query based on the original `event_timestamp` column, and Iceberg intelligently filters partitions based on the `year()` transform, without you needing to specify the transformed partition values directly.  Refer to [Iceberg Partition Transforms](https://iceberg.apache.org/spec#partition-transforms) for more transform examples.",
    "reference": "https://iceberg.apache.org/spec#partition-transforms"
  },
  {
    "question": "Write a Trino SQL query to select specific columns from an Iceberg table, demonstrating column projection for optimized data retrieval.",
    "answer": "Iceberg's column projection ensures only necessary columns are read. You can demonstrate this by selecting a subset of columns in your Trino SQL query. Only those columns will be retrieved from the data files.\n\n`sql markdown\n-- Select only 'order_id', 'customer_id', and 'order_total' columns from 'my_iceberg_table'\nSELECT \n    order_id, \n    customer_id, \n    order_total\nFROM \n    your_iceberg_catalog.your_iceberg_schema.my_iceberg_table\nWHERE \n    order_total > 1000;\n\n-- Explanation:\n-- Only 'order_id', 'customer_id', and 'order_total' are listed in the SELECT clause.\n-- Iceberg and Trino will optimize data retrieval to read only these columns\n-- from the underlying data files, even if the table has many more columns.\n-- This significantly reduces I/O and query processing time.\n-- Replace 'your_iceberg_catalog' and 'your_iceberg_schema' with your values.\n`\n\nThis query demonstrates column projection. By explicitly listing columns, you instruct Iceberg to retrieve only those, optimizing data access. This is particularly beneficial for tables with wide schemas. See [Iceberg Column Projection](https://iceberg.apache.org/spec#column-projection) for details.",
    "reference": "https://iceberg.apache.org/spec#column-projection"
  },
  {
    "question": "How can you query the schema history of an Iceberg table using Trino SQL to observe schema evolution?",
    "answer": "Similar to snapshot history, Trino's system tables let you access schema history. Querying `$schemas` system table reveals the schema evolution history of an Iceberg table, showing how the table's schema has changed over time.\n\n```sql markdown\n-- Retrieve schema history for 'my_iceberg_table'\nSELECT \n    schema_id, \n    schema \nFROM \n    your_iceberg_catalog.your_iceberg_schema.my_iceberg_table$schemas\nORDER BY \n    schema_id;\n\n-- Explanation:\n-- `your_iceberg_table$schemas` is the system table for schema history.\n-- 'schema_id' indicates the schema version, and 'schema' is the JSON\n-- representation of the schema at that version.\n-- Ordering by 'schema_id' shows the schema evolution in chronological order.\n-- Remember to replace 'your_iceberg_catalog' and 'your_iceberg_schema'.\n```\n\nThis query displays the schema history, showing different schema versions and their definitions. Schema history is essential for understanding how a table's structure has evolved due to schema evolution operations.  See [Iceberg Schema Evolution](https://iceberg.apache.org/spec#schema-evolution) for more information.",
    "reference": "https://iceberg.apache.org/spec#schema-evolution"
  },
  {
    "question": "Write a Trino SQL query to retrieve the partition specification history for an Iceberg table, demonstrating partition evolution.",
    "answer": "Iceberg allows partition evolution. To see how the partitioning scheme of a table has changed, you can query the `$partition_specs` system table in Trino.\n\n```sql markdown\n-- Retrieve partition spec history for 'my_iceberg_table'\nSELECT \n    spec_id, \n    fields \nFROM \n    your_iceberg_catalog.your_iceberg_schema.my_iceberg_table$partition_specs\nORDER BY \n    spec_id;\n\n-- Explanation:\n-- `your_iceberg_table$partition_specs` is the system table for partition spec history.\n-- 'spec_id' is the partition spec version, and 'fields' describes the partition\n-- columns and transforms for that spec version in JSON format.\n-- Ordering by 'spec_id' shows partition spec evolution over time.\n-- Replace 'your_iceberg_catalog' and 'your_iceberg_schema' accordingly.\n```\n\nThis query shows the history of partition specifications, including different partition schemes used over time. Partition evolution allows you to adapt partitioning strategies as data and query patterns change. Refer to [Iceberg Partition Evolution](https://iceberg.apache.org/spec#partition-evolution) for details.",
    "reference": "https://iceberg.apache.org/spec#partition-evolution"
  },
  {
    "question": "Using Trino SQL, how can you query Iceberg table statistics to get summary information about the data?",
    "answer": "While Trino doesn't directly expose table statistics through system tables in the same way as snapshots or schemas, you can often get approximate table statistics from Trino's query planner output or monitoring tools when running queries.  However, directly querying precise table statistics as stored in Iceberg metadata via SQL in Trino might be limited. System tables like `$files` and `$manifests` provide file and manifest level statistics which can be aggregated.\n\n```sql markdown\n-- Example of aggregating statistics from manifest files for a table (approximate table stats)\nSELECT \n    sum(manifest.added_rows_count) as total_added_rows,\n    sum(manifest.deleted_rows_count) as total_deleted_rows,\n    sum(manifest.file_count) as total_files\nFROM \n    your_iceberg_catalog.your_iceberg_schema.my_iceberg_table$manifests as manifest\nCROSS JOIN UNNEST(manifest.partitions) as t(partition_info);\n\n-- Explanation:\n-- This query aggregates row counts and file counts from the manifest files.\n-- It joins the `$manifests` system table with its nested 'partitions' field to access\n-- statistics potentially at a partition level (though the aggregation here is table-wide).\n-- This is an *approximation* of table statistics derived from manifest metadata.\n-- More precise table-level stats might be available through engine-specific mechanisms\n-- or Iceberg API access rather than direct SQL queries.\n-- Adjust catalog, schema, and table names as needed.\n```\n\nThis query shows an approach to derive approximate table statistics by aggregating data from manifest metadata.  Direct, comprehensive table statistics queries via SQL in Trino might be engine-dependent and potentially less readily available than metadata inspection queries like snapshot or schema history. Consult Trino documentation and Iceberg API for more precise statistic access.",
    "reference": "https://iceberg.apache.org/spec#table-statistics"
  }
 ]
